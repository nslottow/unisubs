#!/usr/bin/env python

# Amara, universalsubtitles.org
#
# Copyright (C) 2014 Participatory Culture Foundation
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see
# http://www.gnu.org/licenses/agpl-3.0.html.


"""dev -- Useful commands for the dev environment

Put a symlink to this script somewhere in your path.

Then you can do things using "dev <command>".

Run "dev" for a list of commands and "dev help <command>" for help on a
specific command.
"""

from datetime import date
import sys
import os
import optparse
import subprocess

def script_path():
    path = __file__
    while os.path.islink(path):
        path = os.path.join(os.path.dirname(path),
                            os.readlink(path))
    return os.path.abspath(path)

def unisubs_root():
    return os.path.dirname(os.path.dirname(script_path()))

def progname():
    return os.path.basename(sys.argv[0])

class Command(object):
    options = []
    raw_args = False

    @classmethod
    def name(cls):
        return cls.__name__.lower()

    @classmethod
    def all_commands(cls):
        return dict((sub_class.name(), sub_class)
                    for sub_class in cls.__subclasses__())

    @classmethod
    def get_command(cls, name):
        CommandClass = cls.all_commands()[name]
        return CommandClass()

    def usage(self):
        return "%s\n\n%s" % (self.usage_header(), self.usage_detail())

    def usage_header(self):
        header = "usage: %s %s" % (progname(), self.name())
        if self.raw_args:
            return header + " [args]"
        if self.options:
            header += " [options]"
        return header

    def usage_detail(self):
        return self.__doc__

    def make_option_parser(self):
        return optparse.OptionParser(self.usage(), option_list=self.options)

    def print_help(self):
        self.make_option_parser().print_help()

    def run(self, command_args):
        if self.raw_args:
            options = {}
            args = command_args
        else:
            parser = self.make_option_parser()
            (options, args) = parser.parse_args(command_args)
        return self.run_inner(args, options)

    def run_inner(self, args, options):
        raise NotImplementedError()

class Help(Command):
    """Get help on a command."""

    def usage_header(self):
        return "usage: %s help [command]" % (progname(),)

    def run_inner(self, args, options):
        try:
            command_name = args[0]
        except IndexError:
            command_name = 'help'
        try:
            command = Command.get_command(command_name)
        except KeyError:
            print "Unknown command: %s" % command_name
        else:
            command.print_help()

class Bash(Command):
    """Run a bash script inside the app container."""
    options = [
        optparse.make_option('-p', '--expose-port', action='store_true',
                             help='Expose port 8000')
    ]

    def run_inner(self, args, options):
        cmdline = ["docker-compose", "run", "--rm", '-u', 'root']
        if options.expose_port:
            cmdline.extend(['-p', '8000:8000'])
        cmdline.extend(["app", "shell"])
        subprocess.call(cmdline)

class Build(Command):
    """Build the app container."""

    def run_inner(self, args, options):
        build_script = os.path.join(unisubs_root(), 'bin', 'build.py')
        subprocess.call(['python', build_script, 'amara-app'])

class Bump(Command):
    """Bump the version of optional repository."""

    def run_inner(self, args, options):
        self.bump_repo('amara-enterprise')
        os.chdir(unisubs_root())
        subprocess.call(['git', 'commit', '-e', '-m', 'Bumping version'])

    def bump_repo(self, repo_name):
        # Storing root as we'll need to come back
        unisubs_folder = unisubs_root()
        os.chdir(os.path.join(unisubs_root(), repo_name))
        p = subprocess.Popen(['git', 'rev-parse', 'HEAD'],
                             stdout=subprocess.PIPE)
        stdout, stderr = p.communicate()
        commit_id = stdout.strip()
        print 'bumping {0} commit to {1}'.format(repo_name, commit_id)
        # Come back to unisubs root
        os.chdir(unisubs_folder)
        commit_path = os.path.join(unisubs_root(), 'optional', repo_name)
        open(commit_path, 'w').write(commit_id + "\n")
        os.chdir(unisubs_root())
        subprocess.call(['git', 'add', commit_path])

class Manage(Command):
    """Run manage.py inside the app container."""

    raw_args = True

    def run_inner(self, args, options):
        run_manage(args)

class Test(Command):
    """Run unittests."""

    raw_args = True

    def run_inner(self, args, options):
        run_manage(['test', '--settings=dev_settings_test',
                    '--where=/opt/apps/amara'] + args)

class JSTest(Command):
    """Run Javascript unittests."""

    def run_inner(self, args, options):
        subprocess.call(['docker', 'run', '--rm',
                         '--volume=/home/ben/unisubs:/opt/unisubs',
                         'amara/jstest'])

class DBReset(Command):
    """Reset the database."""

    def run_inner(self, args, options):
        run_manage(['drop_all_tables'])
        run_manage(['syncdb', '--all', '--noinput'])
        run_manage(['migrate', '--fake'])
        run_manage(['setup_indexes'])

class DBDump(Command):
    """Dump the database to a flie."""

    def run_inner(self, args, options):
        try:
            path = args[0]
        except IndexError:
            print 'need to specify a file'
            return
        mysql_cmd = ("mysqldump -u amara --host=$DB_1_PORT_3306_TCP_ADDR "
                     "--port=$DB_1_PORT_3306_TCP_PORT amara --password=amara")
        with open(path, 'w') as f:
            subprocess.call(['docker-compose', 'run', '--rm',
                             '--entrypoint=bash', 'app', '-c', mysql_cmd], stdout=f)

class DBLoad(Command):
    """Load the database from a file."""

    def run_inner(self, args, options):
        try:
            path = args[0]
        except IndexError:
            print 'need to specify a file'
            return
        with open(path, 'r') as f:
            run_manage(['dbshell'], stdin=f)

class SyncTranslations(Command):
    """Sync our translation filen with transifex."""

    options = [
        optparse.make_option('-f', '--force', action='store_true',
                             help='Force download translations'),
        optparse.make_option('-p', '--pull-only', action='store_true',
                             help='Download only'),
    ]

    def run_inner(self, args, options):
        if not options.pull_only:
            run_manage(['update_translations'])
            subprocess.check_call(['tx', 'push', '--source'])
        if options.force:
            subprocess.check_call(['tx', 'pull', '--all', '--force'])
        else:
            subprocess.check_call(['tx', 'pull', '--all'])
        run_manage(['compile_translations'])

class Up(Command):
    """Start docker containers."""

    options = [
        optparse.make_option('--jsonlog', action='store_true',
                             help='Use JSON formatted logging'),
        optparse.make_option('--dblog', action='store_true',
                             help='Log DB queries'),
    ]

    def run_inner(self, args, options):
        env = os.environ.copy()
        if options.jsonlog:
            env['JSON_LOGGING'] = '1'
        if options.dblog:
            env['DB_LOGGING'] = '1'
        subprocess.call(['docker-compose', 'up', 'app', 'worker'], env=env)

class PrepDeploy(Command):
    """Start docker containers."""

    def run_inner(self, args, options):
        try:
            if args[0] == 'staging':
                return self.prep_staging()
            elif args[0] == 'production':
                return self.prep_production()
        except IndexError:
            pass
        print "Must specify staging or production"

    def prep_staging(self):
        self.check_branch('staging')
        self.check_optional_commits()
        self.push('staging')

    def prep_production(self):
        self.check_branch('production')
        self.merge_branch('staging')
        self.check_optional_commits()
        self.tag_deploy()
        self.push('production')

    def run_git(self, *args, **kwargs):
        subprocess.call(['git'] + list(args))

    def get_git_output(self, *args, **kwargs):
        return subprocess.check_output(['git'] + list(args), **kwargs).strip()

    def check_value(self, label, value, correct_value):
        if value != correct_value:
            raise AssertionError(
                "{} is {} instead of {}".format(label, value, correct_value))
        print "{} is {}".format(label, value)

    def check_branch(self, correct_branch):
        self.run_git('fetch')
        branch = self.get_git_output('symbolic-ref', '--short', 'HEAD')
        self.check_value("Current branch", branch, correct_branch)

    def check_optional_commits(self):
        self.check_optional_commit('amara-enterprise')

    def check_optional_commit(self, repo_name):
        repo_dir = os.path.join(unisubs_root(), repo_name)
        commit_file = os.path.join(unisubs_root(), 'optional', repo_name)
        with open(commit_file) as f:
            commit_from_file = f.read().strip()
        self.run_git('fetch', cwd=repo_dir)
        commit_from_remote = self.get_git_output('rev-parse', 'origin/HEAD',
                                                 cwd=repo_dir)
        self.check_value('{} commit'.format(repo_name), commit_from_file,
                         commit_from_remote)

    def merge_branch(self, from_branch):
        print "Merging {}".format(from_branch)
        self.run_git('merge', '--ff-only', from_branch)

    def tag_deploy(self):
        today = date.today()
        tag_name = 'deploy-{:04}-{:02}-{:02}'.format(today.year, today.month,
                                                     today.day)
        print "Creating {} tag".format(tag_name)
        self.run_git('tag', tag_name)
        self.run_git('push', 'origin', tag_name)

    def push(self, branch):
        print "Pushing {}".format(branch)
        self.run_git('push', 'origin', branch)

NEEDS_ROOT = [
    'build_docs',
    'update_api_docs',
    'update_translations',
    'compile_translations',
    'schemamigration',
    'datamigration',
]
def run_manage(args, **kwargs):
    if args and args[0] in NEEDS_ROOT:
        cmdline = ['docker-compose', 'run', '-u', 'root', 'app', 'manage']
    else:
        cmdline = ['docker-compose', 'run', 'app', 'manage']
    subprocess.call(cmdline + args, **kwargs)

def usage():
    print "Usage %s [command]" % progname()
    print
    print "Available commands:"
    all_commands = Command.all_commands()
    for name in sorted(all_commands):
        print "%s -- %s" % (name, all_commands[name].__doc__)

def main(args):
    os.chdir(unisubs_root())
    if not args:
        usage()
        return 1
    try:
        command = Command.get_command(args[0])
    except KeyError:
        usage()
        return 1
    else:
        command.run(args[1:])

if __name__ == '__main__':
    rv = main(sys.argv[1:])
    if rv is not None:
        sys.exit(rv)
