Languages
---------

Languages Resource
******************

API endpoint that lists all available languages on the Amara platform.

.. http:get:: /api/languages/

    :>json languages: maps language codes to language names

Videos
------

Videos Resource
***************

List/Search/Lookup videos on Amara

Listing Videos
^^^^^^^^^^^^^^

.. http:get:: /api/videos/

    List videos.  You probably want to specify a query filter parameter to
    limit the results

    List results are paginated.

    :queryparam url video_url: Filter by video URL
    :queryparam slug team: Filter by team
    :queryparam slug project: Filter by team project.  Passing in `null` will
        return only videos that don't belong to a project
    :queryparam string order_by: Change the list ordering.  Possible values:

        - `title`: ascending
        - `-title`: descending
        - `created`: older videos first
        - `-created`: newer videos

.. note::
    - If no query parameter is given, the last 10 public videos are listed.
    - If you pass in the project filter, you need to pass in a team

Get info on a specific video
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. http:get:: /api/videos/(video-id)/

    :>json video-id id: Amara video id
    :>json bcp-47 primary_audio_language_code: Audio language code
    :>json string title: Video title
    :>json string description: Video description
    :>json integer duration: Video duration in seconds (or null if not known)
    :>json url thumbnail: URL to the video thumbnail
    :>json iso-8601 created: Video creation date/time
    :>json slug team: Slug of the Video's team (or null)
    :>json dict metadata: Dict mapping metadata names to values
    :>json list languages: List of languages that have subtitles started.  See
        below for a a description.
    :>json char video_type: Video type identifier
    :>json list all_urls: List of URLs for the video (the first one is the
      primary video URL)
    :>json uri activity_uri: Video Activity Resource
    :>json url urls_uri: Video URL Resource
    :>json uri subtitle_languages_uri: Subtitle languages Resource
    :>json uri resource_uri: Video Resource
    :>json string original_language: contains a copy of
      primary_audio_language_code **(deprecated)**

    **Language data**:

    :>json string code: Language code
    :>json string name: Human readable label for the language
    :>json boolean visibile: Are the subtitles publicly viewable?
    :>json string dir: Language direction ("ltr" or "rtl")
    :>json url subtitles_uri: Subtitles Resource
    :>json url resource_uri: Subtitles Language Resource

Adding a video
^^^^^^^^^^^^^^

.. http:post:: /api/videos/

    :<json url video_url: The url for the video. Any url that Amara accepts
      will work here. You can send the URL for a file (e.g.
      http:///www.example.com/my-video.ogv), or a link to one of our accepted
      providers (youtube, vimeo, dailymotion)
    :<json string title: title of the video
    :<json string description: About this video
    :<json integer duration: Duration in seconds, in case it can not be
      retrieved automatically by Amara
    :<json string primary_audio_language_code: language code for the main
      language spoken in the video.
    :<json url thumbnail: URL to the video thumbnail
    :<json dict metadata: Dictionary of metadata key/value pairs.  These handle
        extra information about the video.  Right now the type keys supported
        are `speaker-name` and `location`.  Values can be any string.
    :<json string team: team slug for the video or null to remove it from its
      team.
    :<json string project: project slug for the video or null to put it in the
        default project.

.. note::

    - When submitting URLs of external providers (i.e. youtube, vimeo), the
      metadata (title, description, duration) can be fetched from them. If
      you're submitting a link to a file (mp4, flv) then you can make sure
      those attributes are set with these parameters. Note that these
      parameters (except the video duration) override any information from the
      original provider or the file header.
    - For all fields, if you pass an empty string, we will treat it as if the
      field was not present in the input (**deprecated**).
    - For slug and project, You can use the string "null" as a synonym for the
      null object (**deprecated**).

Update an existing video
^^^^^^^^^^^^^^^^^^^^^^^^

.. http:put:: /api/videos/(video-id)/

    This uses the same fields as video creation, excluding `video_url`.

    As with creating video, an update can not override the duration received
    from the provider or specified in the file header.


Moving videos between teams and projects
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- To move a video from one team to another, you can make a put request with a
  ``team`` value.
- Similarly, you can move a video to a different project using the
  ``project`` field.  `team` must also be given in this case.
- The user making the change must have permission to remove a video from
  the originating team and permission to add a video to the target team.

Video URL Resource
******************

Each video has at least 1 URL associated with it, but some can have more.
This allows you to associate subtitles with the video on multiple video
providers (e.g. a youtube version, a vimeo version, etc).

One video URL is flagged the `primary URL`.  This is what will gets
used in the embedder and editor.


List URLs for a video
^^^^^^^^^^^^^^^^^^^^^

.. http:get:: /api/videos/(video-id)/urls/

    List results are paginated.

    :>json string video-id: Amara video ID
    :>json iso-8601 created: creation date/time
    :>json url url: URL string
    :>json boolean primary: is this the primary URL for the video?
    :>json boolean original: was this the URL that was created with the video?
    :>json uri resource_uri: Video URL Resource
    :>json integer id: Internal ID for the object **(deprecated, use
      resource_uri rather than trying to construct API URLs yourself)**.

Get details on a specific URL
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. http:get:: (video-url-endpoint)

    The response fields are the same as for the list endpoint

    Use the `resource_uri` from the listing to find the video URL endpoint

Add a URL for a video
^^^^^^^^^^^^^^^^^^^^^
.. http:post:: /api/videos/(video-id)/urls/

    :<json url url: Video URL.  This can be any URL that works in the add video
      form for the site (mp4 files, youtube, vimeo, etc).  Note: The URL
      cannot be in use by another video.
    :<json boolean primary: If True, this URL will be made the primary URL
    :<json boolean original: Is this is the first url for the video?

Making a URL the primary URL for a video
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. http:put:: (video-url-endpoint)

    :<json primary: Pass in true to make a video URL the primary for a video

    Use the `resource_uri` from the listing to find the video URL endpoint

Deleting Video URLs
^^^^^^^^^^^^^^^^^^^

.. http:delete:: (video-url-endpoint)

    Remove a video URL from a video

    Use the `resource_uri` from the listing to find the video URL endpoint

.. note:

    **A video must have a primary URL**.  If this the primary URL for a video,
    the request will fail with a 400 code.

Subtitles
---------

Subtitle Language Resource
**************************

Container for subtitles in one language for a video.  Subtitle languages are
typically created when the first editing session is started.

To see all possible languages see :ref:`languages`.

Listing languages for a video
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. http:get:: /api/videos/(video-id)/languages/

    Get a list of subtitle languages for a video

    List results are paginated.

    :>json bcp-47 language_code: Subtitle language
    :>json string name: Human-readable name for this language
    :>json boolean is_primary_audio_language: Is this language the primary
        language spoken in the video?
    :>json boolean is_rtl: Is this language RTL?
    :>json uri resource_uri: Subtitle Language Resource
    :>json iso-8601 created: when the language was created
    :>json string title: Video title, translated into this language
    :>json string description: Video description, translated into this language
    :>json dict metadata: Video metadata, translated into this language
    :>json boolean subtitles_complete: Are the subtitles complete for this
        language?
    :>json integer subtitle_count: Number of subtitles for this language
    :>json string reviewer: Username of the reviewer fro task-based teams
    :>json string approver: Username of the approver for task-based teams
    :>json boolean is_translation: Is this language translated from other
        languages? **(deprecated)**
    :>json string original_language_code: Source translation language
        **(deprecated)**
    :>json integer num_versions: Number of subtitle versions, the length of the
       versions array should be used instead of this **(deprecated)**
    :>json integer id: Internal ID for the language **(deprecated)**
    :>json boolean is_original: alias for is_primary_audio_language
        **(deprecated)**
    :>json list versions: List of subtitle version data.  See below for details.

    Subtitle version data:

    :>json string author: Subtitle author's username
    :>json integer version_no: number of the version
    :>json boolean published: is this version publicly viewable?

    .. note::
        `original_language_code` and `is_translation` fields are remnants from
        the old subtitle system.  With the new editor, users can use multiple
        languages as a translation source.  These fields are should not be
        relied on.

Getting details on a specific language
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. http:get:: /api/videos/(video-id)/languages/(language-code)/

    The response data is the same as the listing

Creating subtitle languages
^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. http:post:: /api/videos/(video-id)/languages/

    :<json string language_code: bcp-47 code for the language
    :<json boolean is_primary_audio_language: Is this is the primary spoken
        language of the video? *(optional)*.
    :<json boolean subtitles_complete: Are the subtitles for this
       language complete? *(optional)*.
    :<json boolean is_original: Alias for is_primary_audio_language
        **(deprecated)**
    :<json boolean is_complete: Alias for subtitles_complete  **(deprecated)**

.. _subtitles_resource:

Subtitles Resource
******************

Subtitle data in one language for a video.

Fetching subtitles for a given language
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. http:get:: /api/videos/(video-id)/languages/(language-code)/subtitles/

    :queryparam sub_format: The format to return the subtitles in.  This can
        be any format that amara supports including dfxp, srt, vtt, and sbv.
        The default is json, which returns subtitle data encoded list of json
        dicts.
    :queryparam version_number: version number to fetch.  Versions are listed
        in the VideoLanguageResouce request.  If none is specified, the latest
        public version will be returned.  If you want the latest private
        version (and have access to it) use "last".
    :queryparam version: Alias for version_number **(deprecated)**

    :>json integer version_number: version number for the subtitles
    :>json object subtitles: Subtitle data.  The format depends on the
        sub_format param
    :>json string sub_format: Format of the subtitles
    :>json object language: Language data
    :>json string title: Video title, translated into the subtitle's language
    :>json string description: Video description, translated into the subtitle's
        language
    :>json string metadata: Video metadata, translated into the subtitle's language
    :>json string video_title: Video title, translated into the video's language
    :>json string video_description: Video description, translated into the video's
        language
    :>json uri notes_uri: Subtitle notes resource
    :>json uri actions_uri: Subtitle actions resource
    :>json uri resource_uri: Subtitles resource
    :>json url site_uri: URL to view the subtitles on site
    :>json string video: Copy of video_title **(deprecated)**
    :>json integer version_no: Copy of version_number **(deprecated)**

    **Language data:**

    :>json bcp-47 code: Language of the subtitles
    :>json string name: Human readable name for the language
    :>json string dir: Language direction ("ltr" or "rtl")

Getting subtitle data only
^^^^^^^^^^^^^^^^^^^^^^^^^^

Sometimes you want just subtitles data without the rest of the data.  This
is possible using a special Accept headers or the `format` query
parameter.  This can be used to download a DFXP, SRT, or any other
subtitle format that Amara supports.  If one of these is used, then the
sub_format param will be ignored.

==================== ======================= ===================
Format                Accept header           format query param
==================== ======================= ===================
DFXP                  application/ttml+xml    dfxp
SBV                   text/sbv                sbv
SRT                   text/srt                srt
SSA                   text/ssa                ssa
WEBVTT                text/vtt                vtt
==================== ======================= ===================

**Examples:**

.. sourcecode:: http

    GET /api/videos/(video-id)/languages/(language-code)/subtitles/?format=dfxp

.. sourcecode:: http

    GET /api/videos/(video-id)/languages/(language-code)/subtitles/
    Accept: application/ttml+xml

Creating new subtitles
^^^^^^^^^^^^^^^^^^^^^^

.. http:post:: /api/videos/(video-id)/languages/(language-code)/subtitles/

    :<json object subtitles: The subtitles to submit.  The format depends on
        the sub_format param.
    :<json string sub_format: The format used to parse the subs. The same
        formats as for fetching subtitles are accepted. Optional - defaults to
        "dfxp".
    :<json string title: Give a title to the new revision
    :<json string description: Give a description to the new revision
    :<json string action: Name of the action to perform - optional, but
        recommended.  If given, the is_complete param will be ignored.  For
        more details, see the subtitles action documentation by following the
        `actions_uri` field.
    :<json boolean is_complete: Boolean indicating if the complete subtitling
        set is available for this language - optional, defaults to false.
        **(deprecated, use action instead)**

.. _subtitle_actions_resource:

Subtitle Actions Resource
*************************

Subtitle actions are operations on subtitles.  Actions correspond to the
buttons in the upper-right hand corner of the subtitle editor (save, save
a draft, approve, reject, etc).  This resource is used to list and perform
actions on the subtitle set.

**Note:** You can also perform an action together with adding new subtitles
using the action field of the subtitles resource.

Listing actions
^^^^^^^^^^^^^^^

.. http:get:: /api/videos/(video-id)/languages/(language-code)/subtitles/actions/

    Get a list of possible actions for a subtitle set.

    :>json string action: Action name
    :>json string label: Human-friendly string for the action
    :>json boolean complete: Does this action complete the subtitles?  If true,
        then when the action is performed, we will mark the subtitles
        complete.  If false, we will mark them incomplete.  If null, then we
        will not change the subtitles_complete flag.

Performing actions
^^^^^^^^^^^^^^^^^^

.. http:post:: /api/videos/(video-id)/languages/(language-code)/subtitles/actions/

    Perform an action on a subtitle set.  This is like opening the subtitles
    in the editor, not changing anything, and clicking an action button
    (Publish, Save Draft, etc.)

    :<json string action: name of the action to perform

Subtitle Notes Resource
***********************

Subtitle notes saved in the editor.

.. note:: Subtitle notes are currently only supported for team videos

Fetching notes
^^^^^^^^^^^^^^

.. http:get:: /api/videos/(video-id)/languages/(language-code)/subtitles/notes

    :>json username user: Username of the note author
    :>json iso-8601 datetime: when the note was created
    :>json string body: text of the note.

Adding notes
^^^^^^^^^^^^

.. http:post:: /api/videos/(video-id)/languages/(language-code)/subtitles/notes/

    :<json string body: note body

Users
-----

Users Resource
**************

Fetching user data
^^^^^^^^^^^^^^^^^^

.. http:get:: /api/users/[username]/

    :>json username username: username
    :>json string first_name: First name
    :>json string last_name: Last name
    :>json url homepage: Homepage URL
    :>json string biography: Bio text
    :>json integer num_videos: Number of videos followed by the user
    :>json list languages: List of language codes for languages the user
        speaks.
    :>json url avatar: URL to the user's avatar image
    :>json uri activity_uri: User Activity resource
    :>json uri resource_uri: User resource
    :>json string full_name: Full name of the user.

.. note::

    - Many of these fields will be blank if the user hasn't set them from
      their profile page
    - The ``full_name`` field is not used in the amara interface and there is
      no requirement that it needs to be first_name + last_name.  This field
      is for API consumers that want to create users to match their internal
      users and use the full names internally instead of first + last.

Creating Users
^^^^^^^^^^^^^^

.. http:post:: /api/users/

    :<json username username: 30 chars or fewer alphanumeric chars,
        @, _ and are accepted.
    :<json email email: A valid email address
    :<json string password: any number of chars, all chars allowed.
    :<json string first_name: Any chars, max 30 chars. **(optional)**
    :<json string last_name: Any chars, max 30 chars. **(optional)**
    :<json boolean create_login_token: If sent the response will also include
        a url that when visited will login the created user.  Use this to
        allow users to login without explicitly setting their passwords.  This
        URL expires in 2 hours.  **(optional)**
    :<json boolean find_unique_username: If username is taken, we will find a
        similar, unused, username for the new user.  If passed, make sure you
        check the username returned since it might not be the same one that
        you passed in.  If set, usernames can only be a maximum of 24
        characters to make room for potential extra characters.
        **(optional)**

.. note::

    The response includes the ``email`` and ``api_key``, which aren't
    included in the normal GET response.  If clients wish to make requests on
    behalf of this newly created user through the api, they must hold on to
    this data.

Updating user accounts
^^^^^^^^^^^^^^^^^^^^^^

.. http:put:: /api/users/[username]

    :param username username: must match the username of the auth credentials sent

    Inputs the same fields as POST, except `username` and
    `find_unique_username`.

Activity
--------

Video Activity Resource
***********************

.. http:get:: /api/videos/(video-id)/activity/

    :queryparam string type: Filter by activity type (:ref:`activity_types`)
    :queryparam string user: Filter by user who performed the action
    :queryparam bcp-47 language: Filter by the subtitle language
    :queryparam iso-8601 before: Only include activity before this date/time
    :queryparam iso-8601 after: Only include activity after

    :>json string type: Activity type (:ref:`activity_types`)
    :>json iso-8601 date: Date/time of the activity
    :>json username user: User who performed the activity
    :>json video-id video: Video related to the activity (or null)
    :>json bcp-47 language: Language of the subtitles related to the activity
        (or null)
    :>json uri user_uri: Link to the user resource endpoint
    :>json uri video_uri: Link to the video resource endpoint
    :>json uri language_uri: Link to the subtitle language resource endpoint

    Depending on the activity type, extra fields may be present in the
    response data (:ref:`activity_types`).

Team Activity Resource
**********************

.. http:get:: /api/teams/(slug)/activity/

    :queryparam string type: Filter by activity type (:ref:`activity_types`)
    :queryparam string user: Filter by user who performed the action
    :queryparam video-id video: Filter by video
    :queryparam bcp-47 video_language: Filter by video language
    :queryparam bcp-47 language: Filter by the subtitle language
    :queryparam iso-8601 before: Only include activity before this date/time
    :queryparam iso-8601 after: Only include activity after

    Response data is the same as the video activity resource.

User Activity Resource
**********************

.. http:get:: /api/users/(username)/activity/

    :queryparam string type: Filter by activity type (:ref:`activity_types`)
    :queryparam video-id video: Filter by video
    :queryparam bcp-47 video_language: Filter by video language
    :queryparam bcp-47 language: Filter by the subtitle language
    :queryparam slug team: Filter by team
    :queryparam iso-8601 before: Only include activity before this date/time
    :queryparam iso-8601 after: Only include activity after

    Response data is the same as the video activity resource.

.. _activity_types:

Activity Types
**************

An activity type classifies the activity.  Some types have extra data that is
associated with them

+----------------------+----------------------------+------------------------+
| Type                 | Created When              | Notes/Extra Fields      |
+======================+===========================+=========================+
| video-added          | Video added to amara      |                         |
+----------------------+---------------------------+-------------------------+
| comment-added        | Comment posted            | ``language`` will be    |
|                      |                           | null for video comments |
|                      |                           | and set for subtitle    |
|                      |                           | comments                |
+----------------------+---------------------------+-------------------------+
| version-added        | Subtitle version added    |                         |
+----------------------+---------------------------+-------------------------+
| video-url-added      | URL added to video        | ``url`` will contain    |
|                      |                           | the new URL             |
+----------------------+---------------------------+-------------------------+
| video-url-edited     | Primary video URL change  | ``old_url``/``new_url`` |
|                      |                           | will contain the        |
|                      |                           | old/new primary URL     |
+----------------------+---------------------------+-------------------------+
| video-url-deleted    | URL removed from video    | ``url`` will contain    |
|                      |                           | the deleted URL         |
+----------------------+---------------------------+-------------------------+
| video-deleted        | Video deleted from amara  | ``title`` will contain  |
|                      |                           | the deleted video's     |
|                      |                           | title                   |
+----------------------+---------------------------+-------------------------+
| **Team Related Activity**                                                  |
+----------------------+---------------------------+-------------------------+
| member-joined        | User joined team          |                         |
+----------------------+---------------------------+-------------------------+
| member-left          | User left team            |                         |
+----------------------+---------------------------+-------------------------+
| **Task Related Activity**                                                  |
+----------------------+---------------------------+-------------------------+
| version-approved     | Subtitles approved        |                         |
+----------------------+---------------------------+-------------------------+
| version-rejected     | Subtitles sent back by    |                         |
|                      | approver                  |                         |
+----------------------+---------------------------+-------------------------+
| version-accepted     | Subtitles approved by     |                         |
|                      | reviewer                  |                         |
+----------------------+---------------------------+-------------------------+
| version-declined     | Subtitles sent back by    |                         |
|                      | reviewer                  |                         |
+----------------------+---------------------------+-------------------------+


Legacy Activity Resource
************************

Deprecated API endpoint that lists contains all amara activity.  You should
use the team/video/user query param to find the activity you want.  New code
should use the Video, Team, or User, resources (see above).

List activity
^^^^^^^^^^^^^

.. http:get:: /api/activity/

    :queryparam slug team: Show only items related to a given team
    :queryparam boolean team-activity: If team is given, we normally return
        activity on the team's videos.  If you want to see activity for the
        team itself (members joining/leaving and team video deletions, then
        add team-activity=1)
    :queryparam video-id video: Show only items related to a given video
    :queryparam integer type: Show only items with a given activity type.
        Possible values:

        1.  Add video
        2.  Change title
        3.  Comment
        4.  Add version
        5.  Add video URL
        6.  Add translation
        7.  Subtitle request
        8.  Approve version
        9.  Member joined
        10. Reject version
        11. Member left
        12. Review version
        13. Accept version
        14. Decline version
        15. Delete video

    :queryparam bcp-47 language: Show only items with a given language code
    :queryparam timestamp before: Only include items before this time
    :queryparam timestamp after: Only include items after this time

.. note::
    If both team and video are given as GET params, then team will be used and
    video will be ignored.

Get details on one activity item
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. http:get:: /api/activity/[activity-id]/

    :>json integer type: activity type.  The values are listed above
    :>json datetime date: date/time of the activity
    :>json video-id video: ID of the video
    :>json uri video_uri: Video Resource
    :>json bcp-47 language: language for the activity
    :>json uri language_url: Subtile Language Resource
    :>json uri resource_uri: Activity Resource
    :>json username user: username of the user user associated with the
        activity, or null
    :>json string comment: comment body for comment activity, null for other
        types
    :>json string new_video_title: new title for the title-change activity, null
        for other types
    :>json integer id: object id **(deprecated use resource_uri if you need to
        get details on a particular activity)**

Messages
--------

Message Resource
****************

.. http:post:: /api/message/

    Send a message to a user/team

    :>json username user: Recipient User's username
    :>json slug team: Recipient Team's slug
    :>json string subject: Subject of the message
    :>json string content: Content of the message

.. note:: You can only send either ``user`` or ``team``, not both.

Teams
-----

Team Resource
*************

Get a list of teams
^^^^^^^^^^^^^^^^^^^

.. http:get:: /api/teams/

    Get a paginated list of all teams

    :>json string name: Name of the team
    :>json slug slug: Machine name for the team slug (used in URLs)
    :>json string description: Team description
    :>json boolean is_visible: Should this team's videos be publicly visible?
    :>json string membership_policy: Team membership policy. One of:

        - ``Open``
        - ``Application``
        - ``Invitation by any team member``
        - ``Invitation by manager``
        - ``Invitation by admin``

    :>json string video_policy: Team video policy.  One of:

        - ``Any team member``
        - ``Managers and admins``
        - ``Admins only``

    :>json uri activity_uri: Team activity resource
    :>json uri members_uri: Team member list resource
    :>json uri safe_members_uri: "Safe" team members list resource
    :>json uri projects_uri: Team projects resource
    :>json uri applications_uri: Team applications resource (or null if the
        membership policy is not by application)
    :>json uri languages_uri: Team preferred/blacklisted languages resource
    :>json uri tasks_uri: Team tasks resource (or null if tasks are not enabled)
    :>json uri resource_uri: Team resource

.. http:get:: /api/teams/(team-slug)/

    Get details on a single team

    The data is the same as the list endpoint

Updating team settings
~~~~~~~~~~~~~~~~~~~~~~

.. http:put:: /api/teams/(team-slug)

    :<json string name: (required) Name of the team
    :<json slug slug: (required) Manchine name for the team (used in URLs)
    :<json string description: Team description
    :<json boolean is_visible: Should this team be publicly visible?
    :<json string membership_policy:  Team membership policy.  One of:

        - ``Open``
        - ``Application``
        - ``Invitation by any team member``
        - ``Invitation by manager``
        - ``Invitation by admin``

    :<json string video_policy:  Team video policy.  One of:

        - ``Any team member``
        - ``Managers and admins``
        - ``Admins only``

Members Resource
****************

API endpoint for team memberships

Listing members of a team
^^^^^^^^^^^^^^^^^^^^^^^^^

.. http:get:: /api/teams/(team-slug)/members/

    :>json username username: username
    :>json string role: One of: ``owner``, ``admin``, ``manager``, or
        ``contributor``

Get info on a team member
^^^^^^^^^^^^^^^^^^^^^^^^^

.. http:get:: /api/teams/(team-slug)/members/(username)

    The data is in the same format as the listing endpoint.

Adding a member to the team
^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. http:post:: /api/teams/(team-slug)/members/

    :<json username username: username of the user to add
    :<json string role: One of: ``owner``, ``admin``, ``manager``, or
        ``contributor``

Change a team member's role
^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. http:put:: /api/teams/(team-slug)/members/(username)/

    :<json string role: One of: ``owner``, ``admin``, ``manager``, or
        ``contributor``

Removing a user from a team
^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. http:delete:: /api/teams/(team-slug)/members/(username)/

Safe Members Resource
*********************

This resource behaves the same as the normal Team Member resource except
with couple differences for the POST action to add members.

- An invitation is sent to the user to join the team instead of simply
  adding them
- If no user exists with the username, and the email field is included
  in the POST data, we will create a user and send an email to the email
  account.

Projects Resource
*****************

List a team's projects
^^^^^^^^^^^^^^^^^^^^^^

.. http:get:: /api/teams/(team-slug)/projects/

    :>json string name: project name
    :>json slug slug: slug for the project
    :>json string description: project description
    :>json string guidelines: Project guidelines for users working on it
    :>json datetime created: datetime when the project was created
    :>json datetime modified: datetime when the project was last changed
    :>json boolean workflow_enabled: Are tasks enabled for this project?
    :>json uri resource_uri: Project details resource

Get details on a project
^^^^^^^^^^^^^^^^^^^^^^^^

.. http:get:: /api/teams/(team-slug)/projects/(project-slug)/

    The data is the same as the listing endpoint

Creating a project
^^^^^^^^^^^^^^^^^^

.. http:post:: /api/teams/(team-slug)/projects/

    :<json string name: project name
    :<json slug slug: slug for the project
    :<json string description: project description **(optional)**
    :<json string guidelines: Project guidelines for users working on it
        **(optional)**

Updating a project
^^^^^^^^^^^^^^^^^^

.. http:put:: /api/teams/(team-slug)/projects/(project-slug)/

    Uses the same data as the POST method

Delete a project
^^^^^^^^^^^^^^^^

.. http:delete:: /api/teams/(team-slug)/projects/(project-slug)/


Tasks Resource
**************

List all tasks for a team
^^^^^^^^^^^^^^^^^^^^^^^^^

.. http:get:: /api/teams/(team-slug)/tasks/

    :queryparam username assignee: Show only tasks assigned to a username
    :queryparam integer priority: Show only tasks with a given priority
    :queryparam string type: Show only tasks of a given type
    :queryparam video-id video_id: Show only tasks that pertain to a given video
    :queryparam string order_by: Apply sorting to the task list.  Possible values:

        - ``created``   Creation date
        - ``-created``  Creation date (descending)
        - ``priority``  Priority
        - ``-priority`` Priority (descending)
        - ``type``      Task type (details below)
        - ``-type``     Task type (descending)

    :queryparam boolean completed: Show only complete tasks
    :queryparam integer completed-before: Show only tasks completed before a
        given date (as a unix timestamp)
    :queryparam integer completed-after: Show only tasks completed before a
        given date (as a unix timestamp)
    :queryparam boolean open: Show only incomplete tasks

Get details on a specific task
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. http:get:: /api/teams/(team-slug)/tasks/(task-id)/

    :>json video-id video_id: ID of the video being worked on
    :>json bcp-47 language: Language code being worked on
    :>json integer id: ID for the task
    :>json string type: type of task.  One of ``Subtitle``, ``Translate``,
         ``Review``, or ``Approve``
    :>json username assignee: username of the task assignee (or null)
    :>json integer priority: Priority for the task
    :>json datetime created: Date/time when the task was created
    :>json datetime completed: Date/time when the task was completed (or null)
    :>json string approved: Approval status of the task.  One of
        ``In Progress``, ``Approved``, or ``Rejected``
    :>json resource_uri: Task resource

Create a new task
^^^^^^^^^^^^^^^^^

.. http:post:: /api/teams/(team-slug)/tasks/

    :<json video-id video_id: Video ID
    :<json bcp-47 language: language code
    :<json string type: task type to create.  Must be ``Subtitle`` or
        ``Translate``
    :<json username assignee: Username of the task assignee **(optional)**
    :<json integer priority: Priority for the task **(optional)**

Update an existing task
^^^^^^^^^^^^^^^^^^^^^^^

.. http:put:: /api/teams/(team-slug)/tasks/(task-id)/

    :<json username assignee: Username of the task assignee or null to unassign
    :<json integer priority: priority of the task
    :<json boolean send_back: send a truthy value to send the back back
        **(optional)**
    :<json boolean complete: send a truthy value to complete/approve the task
        **(optional)**
    :<json integer version_number: Specify the version number of the subtitles
        that were created for this task **(optional)**

.. note::
    If both send_back and approved are specified, then send_back will take
    preference.

Delete an existing task
^^^^^^^^^^^^^^^^^^^^^^^

.. http:delete:: /api/teams/(team-slug)/tasks/(task-id)/

Applications Resource
*********************

This endpoint only works for teams with membership by application.

List applications
^^^^^^^^^^^^^^^^^

.. http:get:: /api/teams/(team-slug)/applications

    :queryparam string status: Include only applications with this status
    :queryparam integer before: Include only applications submitted before
        this time (as a unix timestamp)
    :queryparam integer after: Include only applications submitted after this
        time (as a unix timestamp)
    :queryparam username user: Include only applications from this user

    List results are paginated

Get details on a single application
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. http:get:: /api/teams/(team-slug)/applications/(application-id)/:

    :>json username user: Username of the applicant
    :>json string note: note given by the applicant
    :>json string status: status value.  Possible values are ``Denied``,
        ``Approved``, ``Pending``, ``Member Removed`` and ``Member Left``
    :>json integer id: application ID
    :>json datetime created: creation date/time
    :>json datetime modified: last modified date/time
    :>json uri resource_uri: Application resource

Approve/Deny an application
^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. http:put:: /api/teams/(team-slug)/applications/(application-id)/

    :<json string status: ``Denied`` to deny the application and ``Approved`` to
        approve it.

Preferred Languages Resource
****************************

Preferred languages will have tasks auto-created for each video.

.. http:put:: /api/teams/(team-slug)/languages/preferred/

    Send a list of language codes as data.

Blacklisted Languages Resource
******************************

Subtitles for blacklisted languages will not be allowed.

.. http:put:: /api/teams/(team-slug)/languages/blacklisted/

    Send a list of language codes as data.

Subtitle Request Resource
-------------------------

This API endpoint is used for subtitle requests for teams new team that use
the collaboration model.  At this point it's only used by a limited number of
teams, but we hope to make it available to everyone in the near future.

Listing Requests
****************

.. http:get:: /api/teams/(team-slug)/subtitle-requests/

    :queryparam string state: Filter by state.  This can be any valid state
      value (see below), or ``in-progress`` meaning any state except complete.
    :queryparam video-id video: Filter by video
    :queryparam bcp-47 video_language: Filter by video request language
    :queryparam bc4-47 language: Filter by subtitle request language
    :queryparam slug project: Filter by project
    :queryparam username assignee: Filter by username

    :>json job-id job_id: ID for the request
    :>json slug team: Team handling the request
    :>json video-id video: Video for the request
    :>json bcp-47 language: Language code of the subtitle request
    :>json string state: current state of the request.  One of:

        - ``needs-subtitler``
        - ``being-subtitled``
        - ``needs-reviewer``
        - ``being-reviewed``
        - ``needs-approver``
        - ``being-approved``
        - ``complete``

    :>json datetime created: when the request was created
    :>json datetime completed: when the request was completed, or null
    :>json uri resource_uri: Subtitle request details resource

Request Details
***************

.. http:get:: /api/subtitle-requests/(job-id)/

    :>json job-id job_id: ID for the request
    :>json slug team: Team handling the request
    :>json video-id video: Video for the request
    :>json bcp-47 language: Language code of the subtitle request
    :>json string state: current state of the request.  One of:

        - ``needs-subtitler``
        - ``being-subtitled``
        - ``needs-reviewer``
        - ``being-reviewed``
        - ``needs-approver``
        - ``being-approved``
        - ``complete``

    :>json datetime created: when the request was created
    :>json datetime completed: when the request was completed, or null
    :>json username subtitler: user creating the subtitles
    :>json username reviewer: user reviewing the subtitles
    :>json username approver: user approving the subtitles
    :>json uri video_uri: Video API resource
    :>json uri subtitler_uri: User resource for the subtitler
    :>json uri reviewer_uri: User resource for the reviewer
    :>json uri approver_uri: User resource for the approver
    :>json uri subtitles_uri: Subtitles resource
    :>json uri actions_uri: Subtitle actions resource
    :>json uri resource_uri: Subtitle request details resource

    - Results are ordered by creation time
    - List results are paginated.

.. note::
   Depending on the team settings, there may or may not be a reviewer/approver
   working on a request.


Listing Remote Requests
***********************

Remote requests are requests for videos on your team, but being handled by a
different team.

.. note::
  The API providers less details on remote requests, since another team is
  responsible for them.  In particular, the state field is much more granular
  and there is no link to the details URI.

.. http:get:: /api/teams/(team-slug)/subtitle-requests/remote/

    :queryparam string state: Filter by state.  This can be:

        - ``complete`` -- subtitles complete
        - ``in-progress`` -- subtitles still being worked on

    :queryparam video-id video: Filter by video
    :queryparam bcp-47 video_language: Filter by video request language
    :queryparam bc4-47 language: Filter by subtitle request language
    :queryparam slug project: Filter by project

    :>json job-id job_id: ID for the request
    :>json slug team: Team handling the request
    :>json video-id video: Video for the request
    :>json bcp-47 language: Language code of the subtitle request
    :>json string state: current state of the request.  One of:

        - ``complete``
        - ``in-progress``

    :>json datetime created: when the request was created
    :>json datetime completed: when the request was completed, or null

Creating Requests
*****************

.. http:post:: /api/subtitle-requests/

    :<json video-id video: Video ID.  This must be part of a team that you are
       an admin for.
    :<json bcp-47 language: language code for the subtitles
    :<json slug team: Team to work on the subtitles.  This can be any team
        you are an admin of.  **(optional, defaults to the team the video is a
        part of.)**
    :<json list-of-slugs evaluation_teams: Teams to evaluate the subtitles
        after the initial work is done.  They can be any team you are an admin
        of.  **(optional)**


Updating Requests
*****************

.. http:PUT:: /api/subtitle-requests/(job-id)/

    :<json username subtitler: Username to assign as the subtitler, or null to
        unassign the current subtitler
    :<json username reviewer: Username to assign as the reviewer, or null to
        unassign the current reviewer
    :<json username approver: Username to assign as the approver, or null to
        unassign the current approver
    :<json slug team: Change the team working on the subtitle request.  This
        is only possible if work has not been started.
    :<json string state: Change the state of the subtitler request.  The only
        valid value is "complete" which marks the subtitle request complete.

**Assigning a user:**


.. sourcecode:: http

    PUT /api/subtitle-requests/abc123/

    {
        "subtitler": "alice"
    }

**Unassigning a user:**

.. sourcecode:: http

    PUT /api/subtitle-requests/abc123/

    {
        "subtitler": null
    }

**Marking a subtitle request complete**

.. sourcecode:: http

    PUT /api/subtitle-requests/abc123/

    {
        "state": "complete"
    }

**Moving a subtitle request to another team**

.. sourcecode:: http

    PUT /api/subtitle-requests/abc123/

    {
        "team": "other-team-slug"
    }

Endorsing Subtitles
*******************

If you have an assignment, you can use the :ref:`subtitles_resource` to submit
subtitles.  Use the ``endorse`` action to endorse them, moving the request to
the next stage.  You can also use the :ref:`subtitle_actions_resource` to
endorse the subtitles without submiting any changes.